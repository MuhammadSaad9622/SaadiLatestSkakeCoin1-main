import Image from "next/image";
import { ConnectButton } from "thirdweb/react";
import thirdwebIcon from "@public/thirdweb.svg";
import { client } from "./client";
import { getContract } from "thirdweb";
import { defineChain } from "thirdweb";
import { readContract } from "thirdweb";
import { useState, useEffect } from "react";
import { useActiveWallet } from "thirdweb/react";
import { useActiveAccount } from "thirdweb/react";

const BSTChain = defineChain({
  id: 7007,
  rpc: "https://rpc.bstchain.io",
})



export default function Home() {

  const [rewards, setRewards] = useState<number | null>(null);
  // const [user, setUser] = useState<string>(""); // Replace with your method to get the current user address
  // const wallet = useActiveWallet();
  const activeAccount = useActiveAccount()?.address;


  const contract = getContract({
    // the client you have created via `createThirdwebClient()`
    client,
    // the chain the contract is deployed on
    chain: BSTChain,
    // the contract's address
    address: "0x6f863fbe417FE0D9b054db4173A9deB299061FbB",
    // OPTIONAL: the contract's abi
    abi: [
      {
        "type": "constructor",
        "name": "",
        "inputs": [],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "event",
        "name": "AdminBSTAdded",
        "inputs": [
          {
            "type": "uint256",
            "name": "amount",
            "indexed": false,
            "internalType": "uint256"
          }
        ],
        "outputs": [],
        "anonymous": false
      },
      {
        "type": "event",
        "name": "AdminBSTRemoved",
        "inputs": [
          {
            "type": "uint256",
            "name": "amount",
            "indexed": false,
            "internalType": "uint256"
          }
        ],
        "outputs": [],
        "anonymous": false
      },
      {
        "type": "event",
        "name": "MonthlyRateUpdated",
        "inputs": [
          {
            "type": "uint256",
            "name": "newRate",
            "indexed": false,
            "internalType": "uint256"
          }
        ],
        "outputs": [],
        "anonymous": false
      },
      {
        "type": "event",
        "name": "OwnershipTransferred",
        "inputs": [
          {
            "type": "address",
            "name": "previousOwner",
            "indexed": true,
            "internalType": "address"
          },
          {
            "type": "address",
            "name": "newOwner",
            "indexed": true,
            "internalType": "address"
          }
        ],
        "outputs": [],
        "anonymous": false
      },
      {
        "type": "event",
        "name": "Paused",
        "inputs": [
          {
            "type": "bool",
            "name": "isPaused",
            "indexed": false,
            "internalType": "bool"
          }
        ],
        "outputs": [],
        "anonymous": false
      },
      {
        "type": "event",
        "name": "Staked",
        "inputs": [
          {
            "type": "address",
            "name": "user",
            "indexed": true,
            "internalType": "address"
          },
          {
            "type": "uint256",
            "name": "amount",
            "indexed": false,
            "internalType": "uint256"
          }
        ],
        "outputs": [],
        "anonymous": false
      },
      {
        "type": "event",
        "name": "Withdrawn",
        "inputs": [
          {
            "type": "address",
            "name": "user",
            "indexed": true,
            "internalType": "address"
          },
          {
            "type": "uint256",
            "name": "amount",
            "indexed": false,
            "internalType": "uint256"
          },
          {
            "type": "uint256",
            "name": "reward",
            "indexed": false,
            "internalType": "uint256"
          }
        ],
        "outputs": [],
        "anonymous": false
      },
      {
        "type": "function",
        "name": "addBST",
        "inputs": [],
        "outputs": [],
        "stateMutability": "payable"
      },
      {
        "type": "function",
        "name": "emergencyWithdrawAll",
        "inputs": [],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "getStakedAmount",
        "inputs": [
          {
            "type": "address",
            "name": "user",
            "internalType": "address"
          }
        ],
        "outputs": [
          {
            "type": "uint256",
            "name": "",
            "internalType": "uint256"
          }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "hasStaked",
        "inputs": [
          {
            "type": "address",
            "name": "",
            "internalType": "address"
          }
        ],
        "outputs": [
          {
            "type": "bool",
            "name": "",
            "internalType": "bool"
          }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "monthlyRate",
        "inputs": [],
        "outputs": [
          {
            "type": "uint256",
            "name": "",
            "internalType": "uint256"
          }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "owner",
        "inputs": [],
        "outputs": [
          {
            "type": "address",
            "name": "",
            "internalType": "address"
          }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "pause",
        "inputs": [],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "paused",
        "inputs": [],
        "outputs": [
          {
            "type": "bool",
            "name": "",
            "internalType": "bool"
          }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "removeBST",
        "inputs": [
          {
            "type": "uint256",
            "name": "amount",
            "internalType": "uint256"
          }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "stake",
        "inputs": [],
        "outputs": [],
        "stateMutability": "payable"
      },
      {
        "type": "function",
        "name": "stakes",
        "inputs": [
          {
            "type": "address",
            "name": "",
            "internalType": "address"
          }
        ],
        "outputs": [
          {
            "type": "uint256",
            "name": "amount",
            "internalType": "uint256"
          },
          {
            "type": "uint256",
            "name": "stakeTime",
            "internalType": "uint256"
          }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "totalStaked",
        "inputs": [],
        "outputs": [
          {
            "type": "uint256",
            "name": "",
            "internalType": "uint256"
          }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "transferOwnership",
        "inputs": [
          {
            "type": "address",
            "name": "newOwner",
            "internalType": "address"
          }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "unpause",
        "inputs": [],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "updateMonthlyRate",
        "inputs": [
          {
            "type": "uint256",
            "name": "newRate",
            "internalType": "uint256"
          }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "viewClaimableRewards",
        "inputs": [
          {
            "type": "address",
            "name": "user",
            "internalType": "address"
          }
        ],
        "outputs": [
          {
            "type": "uint256",
            "name": "",
            "internalType": "uint256"
          }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "withdraw",
        "inputs": [],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "withdrawExcess",
        "inputs": [],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "receive",
        "name": "",
        "inputs": [],
        "outputs": [],
        "stateMutability": "payable"
      }
    ],
  });

    // Function to fetch claimable rewards for the active account
    const fetchClaimableRewards = async () => {
      if (!activeAccount) return;
  
      try {
        // Read the contract to get claimable rewards
        const rewardData: bigint = await readContract({
          contract,
          method: "viewClaimableRewards",
          params: [activeAccount],
        });
        // Set the rewards state as a string
        setRewards(rewardData.toString());
      } catch (error) {
        console.error("Error fetching rewards:", error);
      }
    };
  
    // Effect to fetch claimable rewards when the active account changes
    useEffect(() => {
      if (activeAccount) {
        fetchClaimableRewards();
      }
    }, [activeAccount]);
  
    return (
      <main className="p-4 pb-10 min-h-[100vh] flex items-center justify-center container max-w-screen-lg mx-auto">
        <div className="py-20">
          {/* Header component */}
          <Header />
  
          {/* Connect button for wallet connection */}
          <div className="flex justify-center mb-20">
            <ConnectButton
              client={client}
              appMetadata={{
                name: "Example App",
                url: "https://example.com",
              }}
            />
          </div>
  
          {/* Display rewards or loading message */}
          <div className="flex justify-center mb-20">
            {rewards !== null ? (
              <p>Your Claimable Rewards: {rewards} Tokens</p>
            ) : (
              <p>Loading your claimable rewards...</p>
            )}
          </div>
  
          {/* Additional resources or components */}
          <ThirdwebResources />
        </div>
      </main>
    );
  }


function Header() {
  return (
    <header className="flex flex-col items-center mb-20 md:mb-20">
      <Image
        src={thirdwebIcon}
        alt=""
        className="size-[150px] md:size-[150px]"
        style={{
          filter: "drop-shadow(0px 0px 24px #a726a9a8)",
        }}
      />

      <h1 className="text-2xl md:text-6xl font-semibold md:font-bold tracking-tighter mb-6 text-zinc-100">
        thirdweb SDK
        <span className="text-zinc-300 inline-block mx-1"> + </span>
        <span className="inline-block -skew-x-6 text-blue-500"> Next.js </span>
      </h1>

      <p className="text-zinc-300 text-base">
        Read the{" "}
        <code className="bg-zinc-800 text-zinc-300 px-2 rounded py-1 text-sm mx-1">
          README.md
        </code>{" "}
        file to get started.
      </p>
    </header>
  );
}

function ThirdwebResources() {
  return (
    <div className="grid gap-4 lg:grid-cols-3 justify-center">
      <ArticleCard
        title="thirdweb SDK Docs"
        href="https://portal.thirdweb.com/typescript/v5"
        description="thirdweb TypeScript SDK documentation"
      />

      <ArticleCard
        title="Components and Hooks"
        href="https://portal.thirdweb.com/typescript/v5/react"
        description="Learn about the thirdweb React components and hooks in thirdweb SDK"
      />

      <ArticleCard
        title="thirdweb Dashboard"
        href="https://thirdweb.com/dashboard"
        description="Deploy, configure, and manage your smart contracts from the dashboard."
      />
    </div>
  );
}

function ArticleCard(props: {
  title: string;
  href: string;
  description: string;
}) {
  return (
    <a
      href={props.href + "?utm_source=next-template"}
      target="_blank"
      className="flex flex-col border border-zinc-800 p-4 rounded-lg hover:bg-zinc-900 transition-colors hover:border-zinc-700"
    >
      <article>
        <h2 className="text-lg font-semibold mb-2">{props.title}</h2>
        <p className="text-sm text-zinc-400">{props.description}</p>
      </article>
    </a>
  );
}
